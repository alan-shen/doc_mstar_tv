========================================================================================================
kernel/drivers/usb/core             -       usb core
                                            +----------------+
											| usb.o          |
											| hub.o          |
											| devices.o      |
											| driver.o       |
											| file.o         |
											| hcd.o          |
											| message.o      |
                                            | notify.o       |
											| quirks.o       |
											| urb.o          |
											| buffer.o       |
											| config.o       |
                                            | devio.o        |
											| endpoint.o     |
											| generic.o      |
											| port.o         |
                                            | sysfs.o        |
											| usbcore.o      |
                                            | bc-mstar.o     |
											| mstar-lib.o    |
                                            +----------------+
kernel/drivers/usb/host             -       usb host controller drivers
                                            +----------------+
                                            | ehci-hcd.o     |
											| xhci-hub.o     |
											| xhci.o         |
											| xhci-dbg.o     |
											| xhci-hcd.o     |
											| xhci-mem.o     |
											| xhci-ring.o    |
                                            | xhci-mstar.o   |
                                            +----------------+
kernel/drivers/usb/usb-common.c     -       USB中几个通用的字符串
											+----------------------+
											| usb_otg_state_string |
											| usb_speed_string     | low-speed/full-speed/high-speed/wireless/super-speed |
											| usb_state_string     |
											+----------------------++-----------------+
																	| not attached    |
																	| attached        |
																	| powered         |
																	| reconnecting    |
																	| unauthenticated |
																	| default         |
																	| addresssed      |
																	| configured      |
																	| suspended       |
																	+-----------------+

kernel/drivers/usb/misc             -       USB Miscellaneous driver ?
                                            +----------------+
                                            | NOTHING...     |
                                            +----------------+
kernel/drivers/usb/serial           -       USB Serial device configuration
                                            +----------------+
                                            | bus.o          |
											| cp210x.o       |
											| generic.o      |
											| pl2303.o       |
											| usb-serial.o   |
											| usbserial.o    |
                                            +----------------+
kernel/drivers/usb/storage          -       USB Storage driver configuration
                                            +----------------+
                                            | option_ms.o    |
											| scsiglue.o     |
											| transport.o    |
											| usb-storage.o  |
                                            | initializers.o |
											| protocol.o     |
											| sierra_ms.o    |
											| usb.o          |
											| usual-tables.o |
                                            +----------------+

========================================================================================================
kernel/drivers/usb/class            -       usb class drivers
kernel/drivers/usb/early            -       early USB devices ??
kernel/drivers/usb/image            -       USB 接口的摄像头?usb imaging devices
kernel/drivers/usb/mon              -       usb monitor ??
kernel/drivers/usb/phy              -       Physical Layer USB driver configuration
kernel/drivers/usb/wusbcore         -       无线USB驱动. Wireless USB Core configuration
kernel/drivers/usb/atm              -       ATM/xDSL的驱动. xDSL是各种类型DSL(Digital Subscriber Line)数字用户线路)的总称,包括ADSL等等
========================================================================================================
一些厂商的 USB Host Controller 驱动:
++++++++++++++++++++++++++++++++++++

kernel/drivers/usb/dwc3             -       DesignWare USB3 DRD Core Support
                                            | Synopsys公司还提供知识产权和设计服务
                                            | DesignWare是SoC/ASIC设计者最钟爱的设计IP库和验证IP库
kernel/drivers/usb/c67x00           -       usb controller ?
                                            | Cypress公司是一家知名的电子芯片制造商，其中文名称为——赛普拉
                                            | Cypress C67X00 USB Controller
kernel/drivers/usb/chipidea         -       ChipIdea Highspeed Dual Role Controller ?
                                            | Chipidea, 希迪亚微电子
kernel/drivers/usb/renesas_usbhs    -       Renesas USBHS Controller Drivers
                                            | 瑞萨电子
kernel/drivers/usb/musb             -       Inventra Highspeed Dual Role Controller (TI, ADI, ...)
                                            | USB控制器Inventra
========================================================================================================
USB Controller 设备注册的地方:
++++++++++++++++++++++++++++++

--------------------------------------------
arch/arm/arm-boards/monaco/chip_arch.c

1046 MACHINE_START(MSTAR, CONFIG_MSTAR_CHIP_NAME)
1047     .atag_offset   = 0x00000100,
1048     .map_io = chip_map_io,
1049     .init_irq = chip_init_irq,
1050     .init_machine = chip_board_init,				<===
1051     .smp = smp_ops(chip_smp_ops),
1052 #ifdef CONFIG_GENERIC_CLOCKEVENTS
1053     .init_time = chip_init_timer,
1054 #else
1055     .init_time = chip_init_ptimer,
1056 #endif
1057 MACHINE_END
1058 

--------------------------------------------
arch/arm/arm-boards/monaco/chip_gladiator.c

623 static void __init chip_board_init(void)
...
649 #if defined(CONFIG_USB_EHCI_HCD) || defined(CONFIG_USB_EHCI_HCD_MODULE)                                     
650     Mstar_ehc_platform_init();                      <===
651 #endif

--------------------------------------------
arch/arm/arm-boards/monaco/platform.c

310 int Mstar_ehc_platform_init(void)
311 {                              
312     return platform_add_devices(Mstar_platform_devices, ARRAY_SIZE(Mstar_platform_devices));                
313 }

293 static struct platform_device *Mstar_platform_devices[] = {
294     &Mstar_usb_ehci_device,							<=== /* Mstar-ehci-1 */
295     &Second_Mstar_usb_ehci_device,					<=== /* Mstar-ehci-2 */
296 #if defined(THIRD_UTMI_BASE_ADDRESS_START)
297     &Third_Mstar_usb_ehci_device,					<=== /* Mstar-ehci-3 */
298 #endif
299 #if defined(FOURTH_UTMI_BASE_ADDRESS_START)                                                                 
300     &Fourth_Mstar_usb_ehci_device,					<=== /* Mstar-ehci-4 */
301 #endif                                                                                                      
302 #if defined(FIFTH_UTMI_BASE_ADDRESS_START)
303     &Fifth_Mstar_usb_ehci_device,					<=== /* Mstar-ehci-5 */
304 #endif  
305 #ifdef ENABLE_XHC
306     &Mstar_usb_xhci_device,							<=== /* Mstar-xhci-1 */
307 #endif
308 };

========================================================================================================
Usb设备被识别流程（总结）
++++++++++++++++++++++++++

http://zyg0227.blog.51cto.com/1043164/560575
 
	USB 模块包括 usb core/host/hub/device 驱动.
	其中 HUB 会启动一个内核线程名曰:
		------------------------------------------------------------------------------------------
		khubd (hub_events() 一直在查询(hub使用的是中断传输)); 
		------------------------------------------------------------------------------------------
		当 USB 设备连接在 hub 的某个端口上,
		HUB 检测到有设备连接了进来,
		HUB 会去调用 hub_port_status() 函数去获取 HUB 端口状态,
		------------------------------------------------------------------------------------------
		要是真有设备了,会调用 hub_port_connect_change() 函数
		------------------------------------------------------------------------------------------
		会调用 usb_alloc_dev() 函数为设备分配一个 struct usb_device 结构的对象并初始化,
			[Attached  ] 这个初始化将 USB 设备的状态设置为 Attached,
			[Powered   ] 调用 usb_set_device_state() 函数将设备的状态设置成 USB_STATE_POWERED 上电状态,
			[Default   ] 然后复位设备, 复位成功后, 设备就会进入 Default 状态(这个状态可以接收 hcd 的回应了),
			[Adresssed ] 然后设备又该进入 Address 状态,
				首先调用 hub_set_address() 设置 address 状态需要发送 usb_control_msg() 函数去设置,
				在 usb_control_msg 里面调用了usb_internal_control_msg() 函数,
				这个函数主要的功能就是创建一个控制 urb, 并把它发送给 USB 设备,
				然后等待它完成, 这个过程包括了(usb_alloc_urb()/usb_fill_control_urb()/usb_start_wait_urb())这三个函数调用,
				完了以后,调用 usb_hcd_submit_urb() 将 urb 发送到 HCD,
				HCD 每收到 urb, 就会将它添加到这个 urb 指定的 urb_list 中, 形成链表,
				现在进入了 HCD 模块(略)...
				处理完以后, 会返回一个状态,
				最后数 usb_api_blocking_completion() 会去处理这次 urb 的收尾工作,
				如果成功的话设备就是正式进入了address 状态.
			[Configured] 接下来设备要进入 configer 状态,
				这个过程需要先获取配置 usb_get_device_descriptor->usb_get_descriptor 先得到配置描述符中的 wTotalLength 字段,
				然后通过 wTotalLength 长度,获取所以配置信息,然后将获取的配置解析出来处理(此过程较为繁琐),
				配置好以后调用 usb_new_device() 说明发现了设备驱动,
				然后 tell the world(announce_device()) 说明设备已经找到了,
				最后调用设备模型提供的接口 device_add() 将设备添加到 USB 总线的设备列表里.
		------------------------------------------------------------------------------------------
		然后 usb总线会遍历驱动列表里的每个驱动,
			调用自己的 match(usb_device_match()) 函数看它们和你的设备或接口是否匹配,
			匹配的话调用 device_bind_driver() 函数,
			现在就将控制权交到设备驱动了.
		------------------------------------------------------------------------------------------

========================================================================================================
