=====================================================================================
#cat /proc/$(PID)/maps:
+++++++++++++++++++++++
eg.

b645@ubuntu:~$ sudo cat /proc/1/maps 
7fa4aa759000-7fa4aa765000 r-xp 00000000 08:08 398528                     /lib/x86_64-linux-gnu/libnss_files-2.15.so
7fa4aa765000-7fa4aa964000 ---p 0000c000 08:08 398528                     /lib/x86_64-linux-gnu/libnss_files-2.15.so
7fa4aa964000-7fa4aa965000 r--p 0000b000 08:08 398528                     /lib/x86_64-linux-gnu/libnss_files-2.15.so
7fa4aa965000-7fa4aa966000 rw-p 0000c000 08:08 398528                     /lib/x86_64-linux-gnu/libnss_files-2.15.so
7fa4aa966000-7fa4aa970000 r-xp 00000000 08:08 398468                     /lib/x86_64-linux-gnu/libnss_nis-2.15.so
7fa4aa970000-7fa4aab70000 ---p 0000a000 08:08 398468                     /lib/x86_64-linux-gnu/libnss_nis-2.15.so
7fa4aab70000-7fa4aab71000 r--p 0000a000 08:08 398468                     /lib/x86_64-linux-gnu/libnss_nis-2.15.so
7fa4aab71000-7fa4aab72000 rw-p 0000b000 08:08 398468                     /lib/x86_64-linux-gnu/libnss_nis-2.15.so
7fa4aab72000-7fa4aab89000 r-xp 00000000 08:08 398697                     /lib/x86_64-linux-gnu/libnsl-2.15.so
7fa4aab89000-7fa4aad88000 ---p 00017000 08:08 398697                     /lib/x86_64-linux-gnu/libnsl-2.15.so
...
7fa4abfdb000-7fa4abfe0000 rw-p 00000000 00:00 0 
7fa4abfff000-7fa4ac001000 rw-p 00000000 00:00 0 
7fa4ac001000-7fa4ac002000 r--p 00022000 08:08 398605                     /lib/x86_64-linux-gnu/ld-2.15.so
7fa4ac002000-7fa4ac004000 rw-p 00023000 08:08 398605                     /lib/x86_64-linux-gnu/ld-2.15.so
7fa4ac004000-7fa4ac02a000 r-xp 00000000 08:08 3675647                    /sbin/init
7fa4ac22a000-7fa4ac22c000 r--p 00026000 08:08 3675647                    /sbin/init
7fa4ac22c000-7fa4ac22d000 rw-p 00028000 08:08 3675647                    /sbin/init
7fa4ad392000-7fa4ad494000 rw-p 00000000 00:00 0                          [heap]
7fff6d69a000-7fff6d6bb000 rw-p 00000000 00:00 0                          [stack]
7fff6d7ff000-7fff6d800000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]

=====================================================================================
一共有6列

	第一列:	代表内存段的虚拟地址
	第二列:	代表执行权限, r/w/x不必说, p=私有 s=共享
			不用说, heap和stack段不应该有x,否则就容易被xx,不过这个跟具体的版本有关
	第三列:	代表在进程地址里的偏移量
	第四列:	映射文件的主设备号和次设备号
			通过 cat /proc/devices
			得知fd是253 device-mapper
	第五列:	映像文件的节点号,即inode
	第六列:	是映像文件的路径

			以前我很奇怪怎么会有两个相同的文件路径,原来:
				08048000-08067000 r-xp 00000000 fd:00 843075     /sbin/init
				08067000-08068000 rw-p 0001e000 fd:00 843075     /sbin/init

				一个是只读的,是代码段;
				一个是读写的,是数据段.

			至于为什么共享库分成了三个:
				0034b000-004ae000 r-xp 00000000 fd:00 852734     /lib/libc-2.8.so
				004ae000-004b0000 r--p 00163000 fd:00 852734     /lib/libc-2.8.so
				004b0000-004b1000 rw-p 00165000 fd:00 852734     /lib/libc-2.8.so

				其中的004ae000-004b0000 r--p 00163000 fd:00 852734     /lib/libc-2.8.so还是不能理解
				最后看看神秘的memmap
				可惜不是所有的版本都有这个文件,如同我这里的情况
				只有口头说一说了,memmap需要和maps配合看
				显示出来的每一行代表maps里的一个段
				每一行的每一个数字,代表那个段里的一个页,段有多大,一行就有对应的多少个数字

				如果这个数字是0,代表系统为其分配了虚拟内存,但是没有分配物理内存
				如果有数字,则代表系统为其分配了物理内存,以及有多少个进程引用了这个页
				当然，不会有负数出现
=====================================================================================
=====================================================================================
